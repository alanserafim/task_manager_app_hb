variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
  POSTGRES_DB: "test_db"
  POSTGRES_USER: "runner"
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: "trust"
  DATABASE_URL: "postgresql://$POSTGRES_USER@postgres/$POSTGRES_DB"
  
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - venv/
    - .cache/pip

stages:
  - build
  - unit_test
  - security_scan
  - dependency_scan
  - deploy
  - dast_scan

build_job:
   stage: build
   image: docker:20.10.16
   services:
       - docker:20.10.16-dind
   before_script:
       - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
   script:
       - docker build -t ex-build-dev:latest .
       - docker tag ex-build-dev:local $CI_REGISTRY_IMAGE:latest
       - docker push $CI_REGISTRY_IMAGE:latest
       
unit-test-job:
  stage: unit_test
  image: python:3.9-slim
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - pytest app/tests/unit_tests/ --cov --cov-report=xml 
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/

bandit_scan:
  stage: security_scan
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install bandit
  script:
    - bandit -r app/ --exclude tests/ -f json -o bandit-report.json
  artifacts:
    when: always
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 7 days
  allow_failure: true

dependency_check:
  image: 
    name: owasp/dependency-check:8.3.1
    entrypoint: [""]
  stage: dependency_scan
  script:
    - mkdir -p reports
    - /usr/share/dependency-check/bin/dependency-check.sh --scan . --enableExperimental --format JSON --project "$CI_PROJECT_NAME" --out reports
  artifacts:
    paths:
      - reports/dependency-check-report.json
    expire_in: 1 week

deploy_job:
    stage: deploy
    image: docker:20.10.16
    services:
        - docker:20.10.16-dind
    before_script:
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5;
          fi
    script:
        - echo "Deploying the app"
        - docker run -d -p 5000:5000 ex-build-dev:latest

zap_baseline_scan:
  stage: dast_scan
  image: owasp/zap2docker-stable
  variables:
    TARGET_URL: "http://ex-build-dev:5000"
  services:
    - name: $CI_REGISTRY_IMAGE:latest
      alias: ex-build-dev
  script:
    - mkdir -p reports
    - echo "Waiting for application service to start..."
    - sleep 30
    - wget -q -O /dev/null $TARGET_URL || echo "Warning:Target URL might not be responding yet."
    - echo "Starting ZAP Baseline Scan on $TARGET_URL using image $CI_REGISTRY_IMAGE:latest"
    - zap-baseline.py -t $TARGET_URL -J gl-dast-report.json -r report.html -w report.md
  artifacts:
    when: always
    paths:
      - reports/report.html
      - reports/report.md
      - gl-dast-report.json 
    reports:
      dast: gl-dast-report.json
  allow_failure: true

