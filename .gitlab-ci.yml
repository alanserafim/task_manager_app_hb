variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
  
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - venv/
    - .cache/pip

stages:
  - build
  - unit_test
  - security_scan
  - dependency_scan
  - deploy
  - dast_scan

build_job:
   stage: build
   image: docker:20.10.16
   services:
       - docker:20.10.16-dind
   before_script:
      - echo "--- Debugging Docker Hub Variables ---"
      - echo "Docker Hub User:[$DOCKERHUB_USER]"
      - echo "Docker Hub Token Set:[${DOCKERHUB_TOKEN:+set}]"
      - echo "--------------------------------------"
      - |
        if [ -z "$DOCKERHUB_USER" ] || [ -z "$DOCKERHUB_TOKEN" ]; then
          echo "ERRO FATAL: Variáveis DOCKERHUB_USER ou DOCKERHUB_TOKEN não estão definidas corretamente nas configurações de CI/CD do projeto!"
          exit 1
        fi
      - echo "Logging into Docker Hub as $DOCKERHUB_USER..."
      - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin docker.io
      - echo "Login attempt finished."
   script:
      - DOCKERHUB_IMAGE_NAME="docker.io/$DOCKERHUB_USER/task-manager-app-hb" # Ou o nome do seu repo
      - docker build -t ex-build-dev:local .
      - docker tag ex-build-dev:local "$DOCKERHUB_IMAGE_NAME:latest"
      - echo "Pushing image to $DOCKERHUB_IMAGE_NAME:latest..."
      - docker push "$DOCKERHUB_IMAGE_NAME:latest"
      - echo "Push finished."
       
unit-test-job:
  stage: unit_test
  image: python:3.9-slim
  before_script:
    - python -m venv venv
    - source venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - pytest app/tests/unit_tests/ --cov --cov-report=xml --cov-report=term-missing
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
      - htmlcov/

bandit_scan:
  stage: security_scan
  image: python:3.9-slim
  before_script:
    - pip install --upgrade pip
    - pip install bandit
  script:
    - bandit -r app/ --exclude tests/ -f json -o bandit-report.json
  after_script:
    - |
      python - <<'EOF'
      import json

      # Carrega o arquivo JSON gerado pelo Bandit
      with open('bandit-report.json', 'r') as f:
          data = json.load(f)

      # Cria um dicionário para contar os níveis de severidade
      severity_count = {}

      # Itera sobre os resultados e conta por nível de severidade
      for issue in data.get('results', []):
          level = issue.get('issue_severity', 'Unknown')
          severity_count[level] = severity_count.get(level, 0) + 1

      # Imprime o resumo no log
      print("Resumo do Bandit:")
      for level, count in severity_count.items():
          print(f"{level}: {count}")
      EOF
  artifacts:
    when: always
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
    expire_in: 7 days
  allow_failure: true

dependency_check:
  image: 
    name: owasp/dependency-check:8.3.1
    entrypoint: [""]
  stage: dependency_scan
  script:
    - mkdir -p reports
    - /usr/share/dependency-check/bin/dependency-check.sh --scan . --enableExperimental --format JSON --project "$CI_PROJECT_NAME" --out reports
  after_script:
    - |
      python - <<'EOF'
      import json
      try:
          with open('reports/dependency-check-report.json', 'r') as f:
              report = json.load(f)
          severity_summary = {}
          for dependency in report.get("dependencies", []):
              for vulnerability in dependency.get("vulnerabilities", []):
                  severity = vulnerability.get("severity", "Unknown")
                  severity_summary[severity] = severity_summary.get(severity, 0) + 1
          print("Resumo do Dependency-Check:")
          if severity_summary:
              for severity, count in severity_summary.items():
                  print(f"{severity}: {count}")
          else:
              print("Nenhuma vulnerabilidade encontrada.")
      except Exception as e:
          print("Erro ao gerar o resumo:", e)
      EOF
  artifacts:
    paths:
      - reports/dependency-check-report.json
    expire_in: 1 week

deploy_job:
    stage: deploy
    image: docker:20.10.16
    services:
        - docker:20.10.16-dind
    variables:
    DEPLOY_IMAGE: "docker.io/$DOCKERHUB_USER/task-manager-app-hb:latest"
    before_script:
        - echo "Remove anterior"
        - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
        - echo $PORT_CONTAINERS
        - if [ -n "$PORT_CONTAINERS" ]; then
            docker stop $PORT_CONTAINERS;
            docker rm $PORT_CONTAINERS;
            sleep 5;
          fi
        - docker pull "$DEPLOY_IMAGE"
    script:
        - echo "Deploying the app"
        - docker run -d -p 5000:5000 "$DEPLOY_IMAGE"

zap_baseline_scan:
  stage: dast_scan
  image: ghcr.io/zaproxy/zaproxy:stable
  variables:
    TARGET_URL: "http://ex-build-dev:5000"
    APP_IMAGE: "docker.io/$DOCKERHUB_USER/task-manager-app-hb:latest"

  services:
    - name: $APP_IMAGE
      alias: ex-build-dev
  before_script:
    - mkdir -p /zap/wrk
    - mkdir -p dast-reports
  script:
    - echo "Waiting for application service ($APP_IMAGE) to start..."
    - sleep 30
    - wget -q -O /dev/null $TARGET_URL || echo "Warning:Target URL might not be responding yet."
    - echo "Starting ZAP Baseline Scan on $TARGET_URL using ZAP image ghcr.io/zaproxy/zaproxy:stable"
    - zap-baseline.py --autooff -t $TARGET_URL -I -J "$CI_PROJECT_DIR/dast-reports/gl-dast-report.json" -r "$CI_PROJECT_DIR/dast-reports/report.html" -w "$CI_PROJECT_DIR/dast-reports/report.md"
    #debug
    - echo "ZAP script finished. Checking content of reports directory..."
    - ls -la "$CI_PROJECT_DIR/"
    - ls -la "$CI_PROJECT_DIR/dast-reports/"
    - echo "Finished checking reports directory."
  after_script:
    - |
      python - <<'EOF'
      import json
      try:
          with open('dast-reports/gl-dast-report.json', 'r') as f:
              data = json.load(f)
          # Os alertas do ZAP normalmente estão organizados por site
          alerts = []
          for site in data.get("site", []):
              alerts.extend(site.get("alerts", []))
          severity_summary = {}
          for alert in alerts:
              # O campo 'riskdesc' normalmente vem no formato "High (3)", "Medium (2)", etc.
              riskdesc = alert.get("riskdesc", "Unknown")
              severity = riskdesc.split(" (")[0]
              severity_summary[severity] = severity_summary.get(severity, 0) + 1
          print("Resumo do ZAP DAST Baseline Scan:")
          if severity_summary:
              for severity, count in severity_summary.items():
                  print(f"{severity}: {count}")
          else:
              print("Nenhum alerta encontrado.")
      except Exception as e:
          print("Erro ao gerar o resumo:", e)
      EOF
  artifacts:
    when: always
    paths:
      - dast-reports/report.html
      - dast-reports/report.md
      - dast-reports/gl-dast-report.json
    reports:
      dast:  dast-reports/gl-dast-report.json
  allow_failure: true

